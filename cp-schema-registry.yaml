apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
  labels:
    app: cp-schema-registry
  name: cp-schema-registry
  namespace: strimzi
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: cp-schema-registry
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: '5556'
        prometheus.io/scrape: 'true'
      creationTimestamp: null
      labels: 
        app: cp-schema-registry
    spec:
      containers:
        - env:
            - name: SCHEMA_REGISTRY_HOST_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: SCHEMA_REGISTRY_LISTENERS
              value: 'http://0.0.0.0:8081'
            - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
              value: 'PLAINTEXT://dkv-kafka-kafka-brokers:9092'
            - name: SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID
              value: 'schema-registry'
            - name: SCHEMA_REGISTRY_MASTER_ELIGIBILITY
              value: 'true'
            - name: JMX_PORT
              value: '5555'
          image: 'confluentinc/cp-schema-registry:5.0.1'
          imagePullPolicy: IfNotPresent
          name: cp-schema-registry-server
          ports:
            - containerPort: 8081
              name: schema-registry
              protocol: TCP
            - containerPort: 5555
              name: jmx
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
